package rest

import (
	"net/http"
	"strconv"

	"github.com/cosmos/cosmos-sdk/client/context"
	"github.com/cosmos/cosmos-sdk/types/rest"
	"github.com/cosmos/cosmos-sdk/x/auth/client/utils"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
)

// Used to not have an error if strconv is unused
var _ = strconv.Itoa(42)

type create<%= title(TypeName) %>Request struct {
	BaseReq rest.BaseReq `json:"base_req"`
	Creator string `json:"creator"`
	<%= for (i, field) in Fields { %><%= title(field.Name) %> string `json:"<%= field.Name %>"`
	<% } %>
}

func create<%= title(TypeName) %>Handler(cliCtx context.CLIContext) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req create<%= title(TypeName) %>Request
		if !rest.ReadRESTReq(w, r, cliCtx.Codec, &req) {
			rest.WriteErrorResponse(w, http.StatusBadRequest, "failed to parse request")
			return
		}
		baseReq := req.BaseReq.Sanitize()
		if !baseReq.ValidateBasic(w) {
			return
		}
		creator, err := sdk.AccAddressFromBech32(req.Creator)
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}

		<%= for (i, field) in Fields { %><%= if (field.Datatype == "int32") { %>
		parsed<%= title(field.Name) %>64, err := strconv.ParseInt(req.<%= title(field.Name) %>, 10, 32)
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}
		parsed<%= title(field.Name) %> := int32(parsed<%= title(field.Name) %>64)
			<% } else if (field.Datatype == "bool") { %>
		parsed<%= title(field.Name) %>, err := strconv.ParseBool(req.<%= title(field.Name) %>)
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}	
			<% } else { %>
		parsed<%= title(field.Name) %> := req.<%= title(field.Name) %>
		<% } %><% } %>

		msg := types.NewMsgCreate<%= title(TypeName) %>(
			creator,
			<%= for (i, field) in Fields { %>parsed<%= title(field.Name) %>,
			<% } %>
		)

		err = msg.ValidateBasic()
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}

		utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg{msg})
	}
}

type set<%= title(TypeName) %>Request struct {
	BaseReq rest.BaseReq `json:"base_req"`
	ID 		string `json:"id"`
	Creator string `json:"creator"`
	<%= for (i, field) in Fields { %><%= title(field.Name) %> string `json:"<%= field.Name %>"`
	<% } %>
}

func set<%= title(TypeName) %>Handler(cliCtx context.CLIContext) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req set<%= title(TypeName) %>Request
		if !rest.ReadRESTReq(w, r, cliCtx.Codec, &req) {
			rest.WriteErrorResponse(w, http.StatusBadRequest, "failed to parse request")
			return
		}
		baseReq := req.BaseReq.Sanitize()
		if !baseReq.ValidateBasic(w) {
			return
		}
		creator, err := sdk.AccAddressFromBech32(req.Creator)
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}

		<%= for (i, field) in Fields { %><%= if (field.Datatype == "int32") { %>
		parsed<%= title(field.Name) %>64, err := strconv.ParseInt(req.<%= title(field.Name) %>, 10, 32)
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}
		parsed<%= title(field.Name) %> := int32(parsed<%= title(field.Name) %>64)
			<% } else if (field.Datatype == "bool") { %>
		parsed<%= title(field.Name) %>, err := strconv.ParseBool(req.<%= title(field.Name) %>)
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}	
			<% } else { %>
		parsed<%= title(field.Name) %> := req.<%= title(field.Name) %>
		<% } %><% } %>

		msg := types.NewMsgSet<%= title(TypeName) %>(
			creator,
			req.ID,
			<%= for (i, field) in Fields { %>parsed<%= title(field.Name) %>,
			<% } %>
		)

		err = msg.ValidateBasic()
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}

		utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg{msg})
	}
}

type delete<%= title(TypeName) %>Request struct {
	BaseReq rest.BaseReq `json:"base_req"`
	Creator string `json:"creator"`
	ID 		string `json:"id"`
}

func delete<%= title(TypeName) %>Handler(cliCtx context.CLIContext) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req delete<%= title(TypeName) %>Request
		if !rest.ReadRESTReq(w, r, cliCtx.Codec, &req) {
			rest.WriteErrorResponse(w, http.StatusBadRequest, "failed to parse request")
			return
		}
		baseReq := req.BaseReq.Sanitize()
		if !baseReq.ValidateBasic(w) {
			return
		}
		creator, err := sdk.AccAddressFromBech32(req.Creator)
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}
		msg := types.NewMsgDelete<%= title(TypeName) %>(req.ID, creator)

		err = msg.ValidateBasic()
		if err != nil {
			rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())
			return
		}

		utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg{msg})
	}
}
